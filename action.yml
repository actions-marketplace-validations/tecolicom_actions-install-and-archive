name: install-and-archive generic backend
description: 'GitHub Action to run installer and archive result'
author: 'Office TECOLI, LLC'
branding: 
  color: orange
  icon:  type

inputs:
  command: { required: true,  type: string }
  target:  { required: true,  type: string }
  archive: { required: false, type: string }
  path:    { required: true,  type: string }
  list:    { required: false, type: string, default: "/tmp/updated-list" }
  sudo:    { required: false, type: boolean }
  verbose: { required: false, type: boolean, default: false }

runs:
  using: composite
  steps:

    - id: setup
      shell: bash
      run: |
        : setup install-and-archive
        cat << END
        ::set-output name=epoch::/tmp/epoch-$$
        END

    - id: install
      shell: bash
      run: |
        : install
        [ "${{ inputs.sudo }}" = true ] && sudo=sudo
        epoch="${{ steps.setup.outputs.epoch }}"
        : ${epoch:?}
        test "${{ inputs.command }}" != ''
        test "${{ inputs.target }}" != ''
        touch $epoch && touch -A -01 $epoch &> /dev/null || sleep 0.1
        ls -l $epoch
        $sudo ${{ inputs.command }} ${{ inputs.target }}

    - id: archive
      if: inputs.archive != ''
      shell: bash
      run: |
        : archive
        epoch="${{ steps.setup.outputs.epoch }}"
        archive="${{ inputs.archive }}"
        list=${{ inputs.list }}
        verbose="${{ inputs.verbose }}"
        directory="${{ inputs.path }}"
        [ "${{ inputs.sudo }}" = true ] && sudo=sudo
        : ${epoch:?} ${archive:?} ${directory:?}
        if [ -f $epoch ]
        then
            cd /
            > $list
            for dir in $directory
            do
                [[ ! "$dir" =~ ^/ ]] && echo "$dir does not start with /" && continue
                [ -d "$dir" ] || continue
                echo "$dir:" 1>&2
                # require sudo to avoid permission error
                time sudo \
                find $dir \
                    -not -type d \( -cnewer $epoch -o -newer $epoch \) -print \
                    | tee -a $list \
                    | awk 'END { printf "%s files", NR }' 1>&2
            done
            if [ -s $list ]
            then
                echo "Creating $archive ..."
                sed --in-place s:^/:: $list
                time $sudo tar -cvzf $archive -C / -T $list
                ls -l $archive
                [ "$verbose" = true ] && tar -tvzf $archive || :
            else
                echo "no updated file found."
                > $archive
            fi
        else
            echo $epoch not found
        fi
